!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
G	graph/importer.py	/^        G = nx.DiGraph()$/;"	v
Heft	heft/heft.py	/^class Heft(object):$/;"	c
Task	heft/heft.py	/^class Task(object):$/;"	c
TestDALiuGEBashHeft	tests/tests.py	/^class TestDALiuGEBashHeft(unittest.TestCase): $/;"	c
TestGraphMethods	tests/tests.py	/^class TestGraphMethods(unittest.TestCase):$/;"	c
TestHEFTExperiments	tests/tests.py	/^class TestHEFTExperiments(unittest.TestCase):$/;"	c
TestHeftMethods	tests/tests.py	/^class TestHeftMethods(unittest.TestCase):$/;"	c
TestHeftMethodsOCT	tests/tests.py	/^class TestHeftMethodsOCT(unittest.TestCase):$/;"	c
TestHeftMethodsTopcuoglu	tests/tests.py	/^class TestHeftMethodsTopcuoglu(unittest.TestCase):$/;"	c
TestTaskMethods	tests/tests.py	/^class TestTaskMethods(unittest.TestCase):$/;"	c
__eq__	heft/heft.py	/^    def __eq__(self, task):$/;"	m	class:Task	file:
__hash__	heft/heft.py	/^    def __hash__(self):$/;"	m	class:Task	file:
__init__	heft/heft.py	/^    def __init__(self, comp, comm, graphml):$/;"	m	class:Heft
__init__	heft/heft.py	/^    def __init__(self, tid, comp_cost=[]):$/;"	m	class:Task
__iter__	heft/heft.py	/^    def __iter__(self):$/;"	m	class:Task	file:
__repr__	heft/heft.py	/^    def __repr__(self):$/;"	m	class:Task	file:
ave_comm_cost	heft/heft.py	/^    def ave_comm_cost(self,node,successor):$/;"	m	class:Heft
ave_comp_cost	heft/heft.py	/^    def ave_comp_cost(self,tid):$/;"	m	class:Heft
calc_est	heft/heft.py	/^    def calc_est(self,node,processor_num,task_list):$/;"	m	class:Heft
cmd_list	graph/unroll.py	/^        cmd_list = ['dlg', 'unroll-and-partition', '-L',path ]$/;"	v
count	graph/importer.py	/^            count = count+1$/;"	v
count	graph/importer.py	/^        count = 0 $/;"	v
display_schedule	heft/heft.py	/^    def display_schedule(self):$/;"	m	class:Heft
draw_graph	experiments/draw.py	/^def draw_graph(graph):$/;"	f
gen_oct_graph	graph/graph.py	/^def gen_oct_graph():$/;"	f
gen_test_graph	graph/graph.py	/^def gen_test_graph():$/;"	f
gen_topcuoglu_graph	graph/graph.py	/^def gen_topcuoglu_graph():$/;"	f
graph	graph/importer.py	/^            graph = json.load(f)$/;"	v
graph	graph/importer.py	/^        graph = dict()$/;"	v
graphs	graph/importer.py	/^graphs = dict() $/;"	v
graphs	graph/unroll.py	/^graphs = dict() $/;"	v
insertion_policy	heft/heft.py	/^    def insertion_policy(self):$/;"	m	class:Heft
insertion_policy_max	heft/tmp.py	/^def insertion_policy_max(self):$/;"	f
insertion_policy_min	heft/tmp.py	/^def insertion_policy_min(self):$/;"	f
insertion_policy_top	heft/heft.py	/^    def insertion_policy_top(self):$/;"	m	class:Heft
location	graph/importer.py	/^location = 'data\/input\/json\/'$/;"	v
location	graph/unroll.py	/^location = '..\/daliuge\/daliuge-logical-graphs\/MWA Pipelines\/'$/;"	v
makespan	heft/heft.py	/^    def makespan(self):$/;"	m	class:Heft
max_comp_cost	heft/tmp.py	/^def max_comp_cost(self,tid):$/;"	f
max_makespan	heft/tmp.py	/^def max_makespan(self):$/;"	f
min_comp_cost	heft/tmp.py	/^def min_comp_cost(self,tid):$/;"	f
min_makespan	heft/tmp.py	/^def min_makespan(self):$/;"	f
nodes	graph/generator.py	/^nodes = 1000;$/;"	v
path	graph/importer.py	/^     path = graphs[key]+key$/;"	v
path	graph/unroll.py	/^    path = graphs[graph]+graph$/;"	v
processors	graph/generator.py	/^processors = 5;$/;"	v
random_comm_matrix	graph/graph.py	/^def random_comm_matrix(nodes, cost):$/;"	f
random_comp_matrix	graph/graph.py	/^def random_comp_matrix(processors, nodes, cost):$/;"	f
random_task_dag	graph/graph.py	/^def random_task_dag(nodes, edges):$/;"	f
rank	heft/heft.py	/^    def rank(self, method,processor=0):$/;"	m	class:Heft
rank_heft	experiments/experiment.py	/^def rank_heft():$/;"	f
rank_oct	heft/heft.py	/^    def rank_oct(self, node, pk):$/;"	m	class:Heft
rank_sort_tasks	heft/heft.py	/^    def rank_sort_tasks(self):$/;"	m	class:Heft
rank_up	heft/heft.py	/^    def rank_up(self,node):$/;"	m	class:Heft
rank_up_max	heft/tmp.py	/^def rank_up_max(self,node):$/;"	f
rank_up_min	heft/tmp.py	/^def rank_up_min(self,node):$/;"	f
read_matrix	heft/heft.py	/^def read_matrix(matrix):$/;"	f
retval	data/output/differences.py	/^retval = zip(x,y)$/;"	v
run_random_dag	experiments/plotter.py	/^def run_random_dag():$/;"	f
run_random_heft	experiments/experiment.py	/^def run_random_heft():$/;"	f
save	graph/importer.py	/^        save = variable +title $/;"	v
save	graph/importer.py	/^        save = variable+title$/;"	v
seq_task_dag	graph/graph.py	/^def seq_task_dag(nodes):$/;"	f
setUp	tests/tests.py	/^    def setUp(self):$/;"	m	class:TestDALiuGEBashHeft
setUp	tests/tests.py	/^    def setUp(self):$/;"	m	class:TestHEFTExperiments
setUp	tests/tests.py	/^    def setUp(self):$/;"	m	class:TestHeftMethods
setUp	tests/tests.py	/^    def setUp(self):$/;"	m	class:TestHeftMethodsOCT
setUp	tests/tests.py	/^    def setUp(self):$/;"	m	class:TestHeftMethodsTopcuoglu
setup_graph	experiments/experiment.py	/^def setup_graph():$/;"	f
show_rank	heft/heft.py	/^    def show_rank(self):$/;"	m	class:Heft
tearDown	tests/tests.py	/^    def tearDown(self):$/;"	m	class:TestDALiuGEBashHeft
tearDown	tests/tests.py	/^    def tearDown(self):$/;"	m	class:TestHeftMethods
tearDown	tests/tests.py	/^    def tearDown(self):$/;"	m	class:TestHeftMethodsOCT
tearDown	tests/tests.py	/^    def tearDown(self):$/;"	m	class:TestHeftMethodsTopcuoglu
test_ave_comm	tests/tests.py	/^    def test_ave_comm(self):$/;"	m	class:TestHeftMethods
test_ave_comp	tests/tests.py	/^    def test_ave_comp(self):$/;"	m	class:TestHeftMethods
test_bash_insertion	tests/tests.py	/^    def test_bash_insertion(self):$/;"	m	class:TestDALiuGEBashHeft
test_bash_ranking	tests/tests.py	/^    def test_bash_ranking(self):$/;"	m	class:TestDALiuGEBashHeft
test_calc_est	tests/tests.py	/^    def test_calc_est(self):$/;"	m	class:TestHeftMethods
test_find_appropriate_matrix	tests/tests.py	/^    def test_find_appropriate_matrix(self):$/;"	m	class:TestHEFTExperiments
test_insertion	tests/tests.py	/^    def test_insertion(self):$/;"	m	class:TestHeftMethodsTopcuoglu
test_insertion_policy	tests/tests.py	/^    def test_insertion_policy(self): $/;"	m	class:TestHeftMethods
test_more_things	tests/tests.py	/^    def test_more_things(self):$/;"	m	class:TestHEFTExperiments
test_oct_rank	tests/tests.py	/^    def test_oct_rank(self):$/;"	m	class:TestHeftMethodsOCT
test_random_comm_matrix	tests/tests.py	/^    def test_random_comm_matrix(self):$/;"	m	class:TestGraphMethods
test_rank	tests/tests.py	/^    def test_rank(self):$/;"	m	class:TestHeftMethodsTopcuoglu
test_rank_multiple_successors	tests/tests.py	/^    def test_rank_multiple_successors(self):$/;"	m	class:TestHeftMethods
test_rank_sort	tests/tests.py	/^    def test_rank_sort(self):$/;"	m	class:TestHeftMethods
test_task_equality	tests/tests.py	/^    def test_task_equality(self):$/;"	m	class:TestTaskMethods
test_task_hash	tests/tests.py	/^    def test_task_hash(self):$/;"	m	class:TestTaskMethods
test_task_inequality	tests/tests.py	/^    def test_task_inequality(self):$/;"	m	class:TestTaskMethods
test_task_networkx_add_edges	tests/tests.py	/^    def test_task_networkx_add_edges(self):$/;"	m	class:TestGraphMethods
test_task_networkx_remove_edges	tests/tests.py	/^    def test_task_networkx_remove_edges(self):$/;"	m	class:TestGraphMethods
test_top_sort	tests/tests.py	/^    def test_top_sort(self):$/;"	m	class:TestHeftMethods
title	graph/importer.py	/^        title = key.split('.')[0]$/;"	v
top_makespan	heft/heft.py	/^    def top_makespan(self):$/;"	m	class:Heft
top_sort_tasks	heft/heft.py	/^    def top_sort_tasks(self):$/;"	m	class:Heft
translate	graph/importer.py	/^        translate = dict()$/;"	v
translated_graph	graph/importer.py	/^        translated_graph = nx.DiGraph()$/;"	v
variable	graph/importer.py	/^        variable = 'data\/input\/graphml\/'$/;"	v
variable	graph/importer.py	/^        variable = 'data\/input\/graphml\/translated_'$/;"	v
x	data/output/differences.py	/^x = [10, 60, 110, 160, 210, 260, 310, 360, 410, 460, 510, 560, 610, 660, 710, 760, 810, 860, 910, 960]$/;"	v
x	data/output/nodes.py	/^x = [10, 60, 110, 160, 210, 260, 310, 360, 410, 460, 510, 560, 610, 660, 710, 760, 810, 860, 910, 960]$/;"	v
x	data/output/times.py	/^x = [10, 60, 110, 160, 210, 260, 310, 360, 410, 460, 510, 560, 610, 660, 710, 760, 810, 860, 910, 960]$/;"	v
y	data/output/differences.py	/^y = [67, 282, 409, 627, 685, 852, 986, 1212, 1457, 1563, 1678, 1758, 2095, 2155, 2308, 2493, 2729, 2848, 2995, 3048]$/;"	v
y	data/output/nodes.py	/^y= [74, 265, 430, 630, 736, 986, 1045, 1168, 1341, 1469, 1659, 1938, 1968, 2063, 2221, 2469, 2504, 2643, 2906, 3117]$/;"	v
y	data/output/nodes.py	/^y=[51, 366, 721, 1174, 1372, 1740, 1949, 2234, 2566, 2804, 3255, 3822, 3955, 4001, 4440, 4837, 4955, 5257, 5914, 6309]$/;"	v
y	data/output/times.py	/^y = [0.23508071899414062, 3.7000179290771484, 11.40594482421875, 22.757768630981445, 37.22810745239258, 60.47487258911133, 82.9629898071289, 123.43502044677734, 145.81680297851562, 180.93514442443848, 220.15881538391113, 270.04194259643555, 338.75107765197754, 396.212100982666, 433.4249496459961, 522.4850177764893, 563.244104385376, 783.7879657745361, 732.856035232544, 837.2159004211426]$/;"	v
y	data/output/times.py	/^y = [0.3070831298828125, 6.679058074951172, 22.095918655395508, 46.13900184631348, 79.69284057617188, 135.95199584960938, 180.56488037109375, 235.4910373687744, 311.8569850921631, 378.85117530822754, 475.6600856781006, 568.9229965209961, 705.0349712371826, 820.4288482666016, 951.8091678619385, 1066.3349628448486, 1329.124927520752, 1689.3079280853271, 1743.1540489196777, 1888.7341022491455]$/;"	v
